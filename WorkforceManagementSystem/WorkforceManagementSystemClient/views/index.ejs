<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Workforce Management System</title>

    <link rel="stylesheet" type="text/css" href="/stylesheets/bootstrap/css/bootstrap.min.css" />
    <link rel="stylesheet" type="text/css" href="/stylesheets/font-awesome/css/font-awesome.min.css" />
    <link rel="stylesheet" type="text/css" href="/stylesheets/css/local.css" />

    <script type="text/javascript" src="/stylesheets/js/jquery-1.10.2.min.js"></script>
    <script type="text/javascript" src="/stylesheets/bootstrap/js/bootstrap.min.js"></script>   
    
    <script src="http://code.jquery.com/jquery-1.11.0.min.js"></script>
	<script src="http://code.jquery.com/jquery-migrate-1.2.1.min.js"></script>
	<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.2.26/angular.min.js"></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>     
</head>

<body ng-app="" ng-controller="loginController" class="bg-customimage">
	<div class="modal-body row">
		<div class="container im-centered">
			
			<div class="col-md-12">
			<div class="main-well">
			<div class="row text-center main-title">
				<h1> Workforce Management System </h1>
			</div>
			</div>
			</div>
			   						
			<div class="col-md-6 main-grid">
	            <div class="main-well">
	              	In this project, you will design a 3-tier application that will implement the functions of a simple Workforce Management System for security services such as bay alarm and ADT. You will build on the techniques used in your lab assignments to create the system. For each type of object, you will also need to implement an associated database schema that will be responsible for representing how a given object should be stored in a relational database.
Your system should be built upon some type of distributed architecture. You have to use web services as the middleware technology. You will be given a great deal of artist liberty in how you choose to implement the system. You may add any extra functionality you want (optional, not required), but if you do so, you must document and explain the additional features. 
	              		             
	            </div>
            </div>  
            
            
            <div class="col-md-6 main-grid">        				
			<div class="main-well">	
					
				<form class="form-horizontal">  					
					<fieldset>    			
						<h4> Login here </h4><br>										
						<div class="form-group">      
  							<div class="col-lg-12">
    							<input type="email" ng-model="inputEmail" class="form-control" id="inputEmail" placeholder="Email address" required>  
							</div>
						</div>
						
						<div class="form-group">
							<div class="col-lg-12">      							
    							<input type="password" ng-model="inputPassword" class="form-control" id="inputPassword" placeholder="Password (6 or more characters)" required>
							</div>
						</div>
						<br>
						
						<div class="form-group">
							<div class="col-lg-12">								
								<p>									
									<button type="submit" ng-click="login()" class="btn btn-primary btn-block">Login</button>	
							</div>
						</div>
													
					</fieldset>
				</form>
			</div>
		</div>        
		</div>
		
  	</div>
  	
  	<script>
  	function loginController($scope, $http, $location) {
  		$scope.login = function() {				
	    	$http({
	            method: 'POST',
	            url: '/',
	            data: { "email": $scope.inputEmail, "password": $scope.inputPassword }	            
	         }).success(function(res){	           
	            alert(JSON.stringify(res));	            
	            if(res.Status == "Success")
	           		{	           			
	           			window.location = '/dashboard';         			
	           		}	            	       
	            else
	            	{
	            		alert(res.Status);
            		}	            	
	        }).error(function(error){
	            alert(res.Status);
	        });
	    };
  	}
  	</script>
</body>

	  	